/**
* Server REST
* @author: Jocelyn GIROD
* @date: Septembre 2023
*/
#include <iostream>
#include <pqxx/pqxx>
#include <memory>
#include "Common.hpp"
#include "Handler.hpp"
#include "DataBaseManager.hpp"

using namespace std;
using namespace web;
using namespace http;
using namespace utility;
using namespace http::experimental::listener;

std::unique_ptr<Handler> g_httpHandler;

void initialize_handler(const string_t& address)
{
    uri_builder uri(address);
    string_t addr = uri.to_uri().to_string();
    g_httpHandler = std::unique_ptr<Handler>(new Handler(addr));
    g_httpHandler->open().wait();

    ucout << string_t(U("Listening for request at: ")) << addr << endl;
}

void shutdown_handler()
{
    g_httpHandler->close().wait();
}


int main(int argc, char *argv[])
{
    cout << "REST server C++" << endl;
    string dbParam = "postgresql://postgres@localhost/postgres";
    DataBaseManager::GetInstance(&dbParam);
    utility::string_t port = U("34568");

    cout << "toto" << endl;

    if(argc == 2) {
        port = argv[1];
    }

    utility::string_t address = U("http://127.0.0.1:");
    address.append(port);

    initialize_handler(address);

    //Data base connection
    pqxx::work *pTransaction = DataBaseManager::GetTransaction();

    utility::string_t sql_query("SELECT * FROM public.\"Developers\"");
    pqxx::result r = pTransaction->exec(sql_query.c_str());

    cout << endl;
    for(pqxx::result::const_iterator c = r.begin(); c != r.end(); ++c) {
        cout << "id = " << c[0].as<int>() << endl;
        cout << "first_name = " << c[1].as<string>() << endl;
        cout << "name = " << c[2].as<string>() << endl;
        cout << "age = " << c[3].as<int>() << endl;
        cout << "address = " << c[4].as<string>() << endl;
        cout << "country = " << c[5].as<string>() << endl;
        cout << "phone_number = " << c[6].as<string>() << endl;
        cout << "company = " << c[7].as<string>() << endl;
        cout << "development_language = " << c[8].as<string>() << endl << endl;
    }
    cout << endl;

    cout << "Press ENTER to exit." << endl;

    string line;
    getline(cin, line);

    shutdown_handler();
    DataBaseManager::DeleteInstance();

    return 0;
}
